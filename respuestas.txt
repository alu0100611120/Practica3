Iván Cabaleiro Escudero 			Ruby v2.0.0


18. Escriba el programa que muestra por la consola la frase "Hola Mundo". ¿Qu´e signiﬁcado tiene
la salida?
  La función puts imprime por pantalla el texto y siempre retorna nil.
  
21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’? 

Entre comillas dobles evalúa lo que hay dentro, en este caso si quisiéramos mostrar por pantalla 

pondría un tabulador y un salto de línea, en cambio la segunda expresión al estar entre comillas 

simples la pondría tal cual, como una cadena más. 

 

22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}? 

Transforma la cadena entre llaves a una cadena con comillas simples. 

La cadena helloworld\n tal cual. 

La cadena: “'a' 'b' 'c'” 

 

23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}? 

Transforma en un string con comillas dobles lo que esté delimitado. 

La cadena helloworld con un salto de linea. 

Una string con la cadena 


24. ¿Qué queda en c? 

irb(main):001:0> a = 4

=> 4 

irb(main):002:0> b = 2 

=> 2 

irb(main):003:0> c = << HERE 

irb(main):004:0” --#{a}-- 

irb(main):005:0”--#{b}-- 

irb(main):006:0 ”HERE 

=> "--4--\n--2--\n" 

irb(main):032:0> puts c 

--4-- 

--2-- 

=> nil 

Este ejemplo utiliza heredoc para delimitar el comienzo y final de un String en varias líneas


 

 

25. ¿Qué queda en c? 



irb(main):001:0> a = 4 

=> 4 

irb(main):002:0> b = 2 

=> 2 

irb(main):003:0> c = << 'HERE' 

irb(main):004:0' --#{a}-- 

irb(main):005:0'--#{b}-- 

irb(main):006:0' HERE 

=> "--4--\n--2--\n" 

irb(main):032:0> puts c 

--4-- 

--2-- 

=> nil 

Transforma en un String con comillas simples aunque sí cuenta los saltos de línea.


26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?


s[0,2] = he 

s[-1,1] = o 

s[0,10] = hello 

 

27. ¿Qué queda en g? 


>> g = "hello" 

=> "hello" 

>> g << "world" 

=> helloworld 

 

28. ¿Qué queda en e? 

>> e = ’.’*3 

=> ... 

29. ¿Cuál es el resultado? 

 

>> a = 1 

=> 1 

>> "#{a=a+1} "*3 

=> 222 

 

30. ¿Qué es esto? %w[this is a test] 

Crea un array con los elementos entre corchetes, los elementos son strings con comillas dobles 

=> ["this", "is", "a", "test"] 


31. ¿Qué es esto? %w[\t \n] 

=> ["\\t", "\\n"] 

 

32. ¿Qué es esto? %W[\t \n] 

=> ["\t", "\n"] 

Interpreta lo que hay dentro de las comillas dobles

 

33. ¿Qué contiene nils? nils = Array.new(3) 

Un array de tamaño tres con nil como valor. 

irb(main):081:0> nils = Array.new(3) 

=> [nil, nil, nil] 

 

34. ¿Qué contiene zeros? zeros = Array.new(3, 0) 

Inicializa a cero los valores del array 

> nils = Array.new(3,0) 

=> [0, 0, 0] 

 

 

35. ¿Qué queda en b? 

Una copia del vector x 

>> x = [[1,2],[3,4]] 

=> [[1, 2], [3, 4]] 

>> b = Array.new(x) 

=> [[1, 2], [3, 4]] 

 

36. ¿Qué queda en c? 

El parámetro i es el índice 

>> c = Array.new(3) { |i| 2*i } 

=> [0, 2, 4] 


37. ¿Cuál es el resultado de cada una de estas operaciones? 

to_a convierte lo que recibe a array 

>> a = ('a'..'e').to_a 

=> ["a", "b", "c", "d", "e"] 

>> a[1,1] 

=> ["b"] 

>> a[-2,2] 

=> ["d", "e"] 

>> a[0..2] 

=> ["a", "b", "c"] 

>> a[0...1] 

=> [0..1] 

>>a[-2..-1] 

=> ["d", "e"] 

 

38. ¿Cuál es el resultado de cada una de estas operaciones? 

 

>> a 

=> ["a", "b", "c", "d", "e"] 

>> a[0,2] = %w{A B} 

=> ["A", "B"] 

>> a 

=> ["A", "B", "c", "d", "e"] 

>> a[2..5] = %w{C D E} 

=> ["C", "D", "E"] 

>> a 

=> ["A", "B", "C", "D", "E"] 

>> a[0,0] = [1,2,3] 

=> [1, 2, 3] 

>> a 

=> [1, 2, 3, "A", "B", "C", "D", "E"] 

>> a[0,2] = [] 

=> [] 

>> a 

=> [3, "A", "B", "C", "D", "E"] 

>> a[-1,1] = [ ’Z’ ] 

=> ["Z"] 

>> a 

=> [3, "A", "B", "C", "D", "Z"] 

>> a[-2,2] = nil 

=> nil 

>> a 

=> [3, "A", "B", "C", nil] 

 

39. ¿Cuál es el resultado de cada una de estas operaciones? 

 

>> a = (1...4).to_a 

=> [1, 2, 3, 4] 

>> a = a + [4, 5] 

=> [1, 2, 3, 4, 4, 5] 

>> a += [[6, 7, 8]] 

=> [1, 2, 3, 4, 4, 5, [6, 7, 8]] 

>> a = a + 9 

=> error tienes que pasarle un array 

 

40. ¿Cuál es el resultado de cada una de estas operaciones? 

 

>> a = [] 

=> [] 

>> a << 1 

=> [1] 

>> a << 2 << 3 

=> [1, 2, 3] 

>> a << [4, 5, 6] 

=> [1, 2, 3, [4, 5, 6]] 

>> a.concat [7, 8] 

=> [1, 2, 3, [4, 5, 6], 7, 8] 

 

41. ¿Cuál es el resultado de cada una de estas operaciones? 

 

>> x = %w{a b c b a} 

=> ["a", "b", "c", "b", "a"] 

>> x = x - %w{b c d} 

=> ["a", "a"] 

 

42. ¿Cuál es el resultado de cada una de estas operaciones? 

 

>> z = [0]*8 

=> [0, 0, 0, 0, 0, 0, 0, 0] 

 

43. ¿Cuál es el resultado de cada una de estas operaciones? 

 

>> a = [1, 1, 2, 2, 3, 3, 4] 

=> [1, 1, 2, 2, 3, 3, 4] 

>> b = [5,5, 4, 4, 3, 3, 2] 

=> [5, 5, 4, 4, 3, 3, 2] 

>> c = a | b 

=> [1, 2, 3, 4, 5] 

>> d = b | a 

=> [5, 4, 3, 2, 1] 

>> e = a & b 

=> [2, 3, 4] 

>> f = b & a 

=> [4, 3, 2] 

 

 

44. ¿Qué resultados dan las siguientes operaciones? 

 

>> a = 1..10 

=> 1..10 

>> a.class 

=> Range 

>> a.to_a 

=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

>> b = 1...10 

=> 1....10 

>> b.to_a 

=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

>> b.include? 10 

=> true 

>> b.include? 8 

=> true 

>> b.step(2) {|x| print "#{x} " } 

=> 13579=> 1..10 

>> 1..3.to_a 

=> error 

 

45. ¿Qué resultados dan las siguientes operaciones? 

 

>> r = 0...100 

=> 0....100 

>> r.member? 50 

=> true 

>> r.include? 99.9 

=> true 

>> r.member? 99.9 

=> true 

 

46. ¿Qué resultados dan las siguientes operaciones? 

 

>> true.class 

=> TrueClass 

>> false.class 

=> FalseClass 

>> puts "hello" if 0 

hello 

=> nil 

>> puts "hello" if nil 

=> nil 

>> puts "hello" if "" 

=> hello 

=> nil 

 

47. ¿Qué resultados dan las siguientes operaciones? 

 

>> x = :sym 

=> :sym 

>> x.class 

=> Symbol 

>> x == ’sym’ 

=> false 

>> x == :sym 

=> true 

>> z = :’a long symbol’ 

=> :"a long symbol" 

>> z.class 

=> Symbol 

>> x == ’sym’.to_sym 

=> true 

>> x.to_s == ’sym’ 

=> true 

 

 

48. ¿Qué resultados se dan? 

 

>> s = "Ruby" 

=> "Ruby" 

>> t = s 

=> "Ruby" 

>> t[-1] = "" 

=> "" 

>> print s 

=>Rub 

>> t = "Java" 

=> "Java" 

>> print s, t 

RubJava => nil 



49. ¿Qué resultados dan las siguientes operaciones? 

 

>> x = { :a => 1, :b => 2 } 

=> {:b=>2, :a=>1} 

>> x.keys 

=> [:a, :b] 

>> x.values 

=> [1, 2] 

>> x[:c] = 3 

=> 3 

>> x 

=> {:a=>1, :b=>2, :c=>3} 

>> x.delete(’a’) 

=> nil 

>> x 

=> {:a=>1, :b=>2, :c=>3} 

>> x.delete(:a) 

=> 1 

>> x 

=> {:b=>2, :c=>3} 

>> x = { :a => 1, :b => 2, :c => 4 } 

=> {:b=>2, :c=>4, :a=>1} 

>> x.delete_if { |k,v| v % 2 == 0 }

=> {:a=>1} 

>> x 

=> {:a=>1} 

 

50. ¿Cuál es el resultado? 

>> "%d %s" % [3, "rubies"] 

=> "3 rubies" 

Crea una cadena pasándole un array, el parámetro %d indica que el primer elemento tiene que ser un dígito
y el parámetro %s indica lo mismo para un String

51. ¿Cuáles son los resultados? 

 

>> x, y = 4, 5 

=> [4, 5] 

>> z = x > y ? x : y 

=> 5 

>> x,y,z = [1,2,3] 

=> => [1, 2, 3] 

 

53. ¿Qué hace yield 4, 5? 

Llama al siguiente bloque anónimo y le pasa como parámetros los valores 4 y 5. 

 

54. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la 

asignación counts = {}? 

La primera crea un hash con claves inicializadas a cero y la segunda lo mismo con las claves inicializadas a nils 

 

55. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/ 

Retorna un array con las palabras que contengan uno o más símbolos (\w+)

["hello", "world", "hello", "LPP"] 

 

56. Explique que hacen estas sentencias: 

c = { :a => 3, :b => 2, :c => 1 } 

Crea un hash con claves (keys) :a, :b, :c cuyos valores respectivamente son 3, 2, 1. 

c.keys.sort.each { |k| puts c[k] } 

3 

2 

1 

=> [:a, :b, :c]